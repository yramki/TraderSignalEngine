# Discord Trading Signal Scraper - Product Requirements

## Purpose
An automated tool that monitors Discord messages for trading signals from specific trusted traders, identifies and clicks "Unlock Content" buttons to reveal hidden trading information, and captures the revealed trading recommendations

## Core Requirements

### 1. Target Discord Environment
- Monitor the "Wealth Group" Discord server
- Focus specifically on the "trades" channel
- Detect when Discord is visible and in the correct server/channel

### 2. Trader Detection
- Monitor messages only from specific trusted traders:
  - @Atackz
  - @Johnny
  - @Woods
  - @Michele
- Allow configuration of target traders through UI and config file
- Support flexible matching of trader names with confidence scoring

### 3. Trading Signal Detection
A complete trading signal requires the presence of ALL THREE criteria:
1. Message from a target trader (@Atackz, @Johnny, @Woods, @Michele)
2. Text indicating locked content: "Press the button to unlock the content..." 
3. A blue "Unlock Content" button

### 4. Button Detection & Interaction
- Identify blue "Unlock Content" buttons using color detection (Discord blue)
- Button dimensions are approximately 120-140px wide by 30-35px tall
- Click in the center of the detected button to reveal hidden content
- Do not click on buttons for messages that don't meet all three criteria
- Do not click on already unlocked content (containing: "valid limit order", "entry:", "sl:", etc.)

### 5. Processing Flow
1. Capture screen and search for Discord window with Wealth Group server and trades channel
2. Scan for messages containing all three criteria (trader + unlock text + button)
3. When a complete trading signal is found, click the "Unlock Content" button
4. Wait for content to be revealed and scroll down to ensure visibility
5. Process newly revealed content for trading information

### 6. Logging and Notification
- Log clear, consistent information when trading signals are found:
  - Format: "Trading signal found: @Handle, Time: HH:MM:SS"
- Log button click actions with coordinates:
  - Format: "Clicking button at (X, Y)"
- Provide visual confirmation of detected elements in logs with emoji indicators
- Save screenshots of detected buttons and trading signals for verification

### 7. Error Handling and Recovery
- Fall back to alternative detection methods if primary detection fails
- Support emergency button detection as a last resort
- Handle screen changes and maintain position through auto-scrolling
- Release mouse and resources properly on exit

### 8. Configuration Options
- Allow customization of:
  - Target traders
  - Scan interval
  - Auto-scroll settings
  - Trading parameters
  - Input controller selection (PyAutoGUI vs. native macOS)

## Technical Requirements

### 1. Detection Algorithms
- Use HSV color space for reliable button color detection
- Multiple detection approaches with fallbacks:
  - OCR-based text detection using pytesseract
  - Color and contour-based button detection
  - Shape and size matching for buttons

### 2. Performance Considerations
- Minimize CPU/GPU usage during continuous scanning
- Operate at a reasonable scan interval (default: 2 seconds)
- Ensure clean release of resources when stopped

### 3. User Interface
- Provide configuration UI for all settings
- Display real-time status of detection efforts
- Show history of detected trading signals

## Future Enhancements
- Integration with trading APIs for automated execution
- Statistical analysis of trader performance
- Enhanced signal parsing for specific trading parameters
- Support for additional Discord servers and channels